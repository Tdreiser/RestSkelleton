version: '3.5'

services:
  database:
    image: postgres:10
    container_name: database
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    volumes:
      - .:/docker-entrypoint-initdb.d
    healthcheck:
      test: pg_isready -U postgres -d postgres -p 5432
      interval: 2s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    networks:
      - web_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - web_net

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - web_net

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    networks:
      - web_net

  app:
    build: .
    container_name: 'java-skeleton'
    ports:
      - "8080:8080"
    networks:
      - web_net

  liquibase:
    container_name: liquibase
    build:
      dockerfile: /liquibase/Dockerfile
    depends_on:
      database:
        condition: service_healthy
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASS=postgres
      - LIQUI_CHANGELOG=master.xml
    networks:
      - web_net

networks:
  web_net:
    driver: bridge
    name: web_net